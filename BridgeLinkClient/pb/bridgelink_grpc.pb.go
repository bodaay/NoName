// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bridgelink

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BridgeLinkClient is the client API for BridgeLink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BridgeLinkClient interface {
	GetServiceLinkVersionNumber(ctx context.Context, in *ServiceLinkVersionRequest, opts ...grpc.CallOption) (*ServiceLinkVersionResponse, error)
	GetUptime(ctx context.Context, in *UptimeRequest, opts ...grpc.CallOption) (*UptimeResponse, error)
	StreamRandomString(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (BridgeLink_StreamRandomStringClient, error)
}

type bridgeLinkClient struct {
	cc grpc.ClientConnInterface
}

func NewBridgeLinkClient(cc grpc.ClientConnInterface) BridgeLinkClient {
	return &bridgeLinkClient{cc}
}

func (c *bridgeLinkClient) GetServiceLinkVersionNumber(ctx context.Context, in *ServiceLinkVersionRequest, opts ...grpc.CallOption) (*ServiceLinkVersionResponse, error) {
	out := new(ServiceLinkVersionResponse)
	err := c.cc.Invoke(ctx, "/bridgelink.BridgeLink/GetServiceLinkVersionNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeLinkClient) GetUptime(ctx context.Context, in *UptimeRequest, opts ...grpc.CallOption) (*UptimeResponse, error) {
	out := new(UptimeResponse)
	err := c.cc.Invoke(ctx, "/bridgelink.BridgeLink/GetUptime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeLinkClient) StreamRandomString(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (BridgeLink_StreamRandomStringClient, error) {
	stream, err := c.cc.NewStream(ctx, &BridgeLink_ServiceDesc.Streams[0], "/bridgelink.BridgeLink/StreamRandomString", opts...)
	if err != nil {
		return nil, err
	}
	x := &bridgeLinkStreamRandomStringClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BridgeLink_StreamRandomStringClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type bridgeLinkStreamRandomStringClient struct {
	grpc.ClientStream
}

func (x *bridgeLinkStreamRandomStringClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BridgeLinkServer is the server API for BridgeLink service.
// All implementations must embed UnimplementedBridgeLinkServer
// for forward compatibility
type BridgeLinkServer interface {
	GetServiceLinkVersionNumber(context.Context, *ServiceLinkVersionRequest) (*ServiceLinkVersionResponse, error)
	GetUptime(context.Context, *UptimeRequest) (*UptimeResponse, error)
	StreamRandomString(*StreamRequest, BridgeLink_StreamRandomStringServer) error
	mustEmbedUnimplementedBridgeLinkServer()
}

// UnimplementedBridgeLinkServer must be embedded to have forward compatible implementations.
type UnimplementedBridgeLinkServer struct {
}

func (UnimplementedBridgeLinkServer) GetServiceLinkVersionNumber(context.Context, *ServiceLinkVersionRequest) (*ServiceLinkVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceLinkVersionNumber not implemented")
}
func (UnimplementedBridgeLinkServer) GetUptime(context.Context, *UptimeRequest) (*UptimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUptime not implemented")
}
func (UnimplementedBridgeLinkServer) StreamRandomString(*StreamRequest, BridgeLink_StreamRandomStringServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRandomString not implemented")
}
func (UnimplementedBridgeLinkServer) mustEmbedUnimplementedBridgeLinkServer() {}

// UnsafeBridgeLinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BridgeLinkServer will
// result in compilation errors.
type UnsafeBridgeLinkServer interface {
	mustEmbedUnimplementedBridgeLinkServer()
}

func RegisterBridgeLinkServer(s grpc.ServiceRegistrar, srv BridgeLinkServer) {
	s.RegisterService(&BridgeLink_ServiceDesc, srv)
}

func _BridgeLink_GetServiceLinkVersionNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceLinkVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeLinkServer).GetServiceLinkVersionNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridgelink.BridgeLink/GetServiceLinkVersionNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeLinkServer).GetServiceLinkVersionNumber(ctx, req.(*ServiceLinkVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeLink_GetUptime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UptimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeLinkServer).GetUptime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridgelink.BridgeLink/GetUptime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeLinkServer).GetUptime(ctx, req.(*UptimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeLink_StreamRandomString_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BridgeLinkServer).StreamRandomString(m, &bridgeLinkStreamRandomStringServer{stream})
}

type BridgeLink_StreamRandomStringServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type bridgeLinkStreamRandomStringServer struct {
	grpc.ServerStream
}

func (x *bridgeLinkStreamRandomStringServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// BridgeLink_ServiceDesc is the grpc.ServiceDesc for BridgeLink service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BridgeLink_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridgelink.BridgeLink",
	HandlerType: (*BridgeLinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceLinkVersionNumber",
			Handler:    _BridgeLink_GetServiceLinkVersionNumber_Handler,
		},
		{
			MethodName: "GetUptime",
			Handler:    _BridgeLink_GetUptime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRandomString",
			Handler:       _BridgeLink_StreamRandomString_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bridgelink.proto",
}
