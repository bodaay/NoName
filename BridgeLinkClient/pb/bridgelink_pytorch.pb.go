// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.23.1
// source: bridgelink_pytorch.proto

package bridgelink

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CudaAvailableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CudaAvailableRequest) Reset() {
	*x = CudaAvailableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridgelink_pytorch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CudaAvailableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CudaAvailableRequest) ProtoMessage() {}

func (x *CudaAvailableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bridgelink_pytorch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CudaAvailableRequest.ProtoReflect.Descriptor instead.
func (*CudaAvailableRequest) Descriptor() ([]byte, []int) {
	return file_bridgelink_pytorch_proto_rawDescGZIP(), []int{0}
}

type CudaAvailableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"` // is CUDA available
}

func (x *CudaAvailableResponse) Reset() {
	*x = CudaAvailableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridgelink_pytorch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CudaAvailableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CudaAvailableResponse) ProtoMessage() {}

func (x *CudaAvailableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridgelink_pytorch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CudaAvailableResponse.ProtoReflect.Descriptor instead.
func (*CudaAvailableResponse) Descriptor() ([]byte, []int) {
	return file_bridgelink_pytorch_proto_rawDescGZIP(), []int{1}
}

func (x *CudaAvailableResponse) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

type CudaDeviceCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CudaDeviceCountRequest) Reset() {
	*x = CudaDeviceCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridgelink_pytorch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CudaDeviceCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CudaDeviceCountRequest) ProtoMessage() {}

func (x *CudaDeviceCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bridgelink_pytorch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CudaDeviceCountRequest.ProtoReflect.Descriptor instead.
func (*CudaDeviceCountRequest) Descriptor() ([]byte, []int) {
	return file_bridgelink_pytorch_proto_rawDescGZIP(), []int{2}
}

type CudaDeviceCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"` // number of CUDA devices
}

func (x *CudaDeviceCountResponse) Reset() {
	*x = CudaDeviceCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridgelink_pytorch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CudaDeviceCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CudaDeviceCountResponse) ProtoMessage() {}

func (x *CudaDeviceCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridgelink_pytorch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CudaDeviceCountResponse.ProtoReflect.Descriptor instead.
func (*CudaDeviceCountResponse) Descriptor() ([]byte, []int) {
	return file_bridgelink_pytorch_proto_rawDescGZIP(), []int{3}
}

func (x *CudaDeviceCountResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CudaMemInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CudaDeviceID int32 `protobuf:"varint,1,opt,name=cudaDeviceID,proto3" json:"cudaDeviceID,omitempty"`
}

func (x *CudaMemInfoRequest) Reset() {
	*x = CudaMemInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridgelink_pytorch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CudaMemInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CudaMemInfoRequest) ProtoMessage() {}

func (x *CudaMemInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bridgelink_pytorch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CudaMemInfoRequest.ProtoReflect.Descriptor instead.
func (*CudaMemInfoRequest) Descriptor() ([]byte, []int) {
	return file_bridgelink_pytorch_proto_rawDescGZIP(), []int{4}
}

func (x *CudaMemInfoRequest) GetCudaDeviceID() int32 {
	if x != nil {
		return x.CudaDeviceID
	}
	return 0
}

type CudaMemInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalMemoryMB    float32 `protobuf:"fixed32,1,opt,name=totalMemoryMB,proto3" json:"totalMemoryMB,omitempty"`
	TotalAllocatedMB float32 `protobuf:"fixed32,2,opt,name=totalAllocatedMB,proto3" json:"totalAllocatedMB,omitempty"`
	TotalAvailableMB float32 `protobuf:"fixed32,3,opt,name=totalAvailableMB,proto3" json:"totalAvailableMB,omitempty"`
}

func (x *CudaMemInfoResponse) Reset() {
	*x = CudaMemInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridgelink_pytorch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CudaMemInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CudaMemInfoResponse) ProtoMessage() {}

func (x *CudaMemInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridgelink_pytorch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CudaMemInfoResponse.ProtoReflect.Descriptor instead.
func (*CudaMemInfoResponse) Descriptor() ([]byte, []int) {
	return file_bridgelink_pytorch_proto_rawDescGZIP(), []int{5}
}

func (x *CudaMemInfoResponse) GetTotalMemoryMB() float32 {
	if x != nil {
		return x.TotalMemoryMB
	}
	return 0
}

func (x *CudaMemInfoResponse) GetTotalAllocatedMB() float32 {
	if x != nil {
		return x.TotalAllocatedMB
	}
	return 0
}

func (x *CudaMemInfoResponse) GetTotalAvailableMB() float32 {
	if x != nil {
		return x.TotalAvailableMB
	}
	return 0
}

var File_bridgelink_pytorch_proto protoreflect.FileDescriptor

var file_bridgelink_pytorch_proto_rawDesc = []byte{
	0x0a, 0x18, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x79, 0x74,
	0x6f, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x75, 0x64, 0x61, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35,
	0x0a, 0x15, 0x43, 0x75, 0x64, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x75, 0x64, 0x61, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x2f, 0x0a, 0x17, 0x43, 0x75, 0x64, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x38, 0x0a, 0x12, 0x43, 0x75, 0x64, 0x61, 0x4d, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x64, 0x61, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75,
	0x64, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x43,
	0x75, 0x64, 0x61, 0x4d, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x4d, 0x42, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x42, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x42, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x42, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x42,
	0x32, 0xa2, 0x02, 0x0a, 0x0e, 0x50, 0x79, 0x54, 0x6f, 0x72, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x49, 0x73, 0x43, 0x75, 0x64, 0x61, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x75, 0x64, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x75, 0x64, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x43, 0x75, 0x64, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x43, 0x75, 0x64, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x75, 0x64, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x43, 0x75, 0x64, 0x61, 0x4d, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x43, 0x75, 0x64, 0x61, 0x4d, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1d, 0x5a, 0x1b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bridgelink_pytorch_proto_rawDescOnce sync.Once
	file_bridgelink_pytorch_proto_rawDescData = file_bridgelink_pytorch_proto_rawDesc
)

func file_bridgelink_pytorch_proto_rawDescGZIP() []byte {
	file_bridgelink_pytorch_proto_rawDescOnce.Do(func() {
		file_bridgelink_pytorch_proto_rawDescData = protoimpl.X.CompressGZIP(file_bridgelink_pytorch_proto_rawDescData)
	})
	return file_bridgelink_pytorch_proto_rawDescData
}

var file_bridgelink_pytorch_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_bridgelink_pytorch_proto_goTypes = []interface{}{
	(*CudaAvailableRequest)(nil),    // 0: bridgelink.CudaAvailableRequest
	(*CudaAvailableResponse)(nil),   // 1: bridgelink.CudaAvailableResponse
	(*CudaDeviceCountRequest)(nil),  // 2: bridgelink.CudaDeviceCountRequest
	(*CudaDeviceCountResponse)(nil), // 3: bridgelink.CudaDeviceCountResponse
	(*CudaMemInfoRequest)(nil),      // 4: bridgelink.CudaMemInfoRequest
	(*CudaMemInfoResponse)(nil),     // 5: bridgelink.CudaMemInfoResponse
}
var file_bridgelink_pytorch_proto_depIdxs = []int32{
	0, // 0: bridgelink.PyTorchService.IsCudaAvailable:input_type -> bridgelink.CudaAvailableRequest
	2, // 1: bridgelink.PyTorchService.GetCudaDeviceCount:input_type -> bridgelink.CudaDeviceCountRequest
	4, // 2: bridgelink.PyTorchService.GetGPUMemoryInfo:input_type -> bridgelink.CudaMemInfoRequest
	1, // 3: bridgelink.PyTorchService.IsCudaAvailable:output_type -> bridgelink.CudaAvailableResponse
	3, // 4: bridgelink.PyTorchService.GetCudaDeviceCount:output_type -> bridgelink.CudaDeviceCountResponse
	5, // 5: bridgelink.PyTorchService.GetGPUMemoryInfo:output_type -> bridgelink.CudaMemInfoResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_bridgelink_pytorch_proto_init() }
func file_bridgelink_pytorch_proto_init() {
	if File_bridgelink_pytorch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bridgelink_pytorch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CudaAvailableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridgelink_pytorch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CudaAvailableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridgelink_pytorch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CudaDeviceCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridgelink_pytorch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CudaDeviceCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridgelink_pytorch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CudaMemInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridgelink_pytorch_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CudaMemInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bridgelink_pytorch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bridgelink_pytorch_proto_goTypes,
		DependencyIndexes: file_bridgelink_pytorch_proto_depIdxs,
		MessageInfos:      file_bridgelink_pytorch_proto_msgTypes,
	}.Build()
	File_bridgelink_pytorch_proto = out.File
	file_bridgelink_pytorch_proto_rawDesc = nil
	file_bridgelink_pytorch_proto_goTypes = nil
	file_bridgelink_pytorch_proto_depIdxs = nil
}
