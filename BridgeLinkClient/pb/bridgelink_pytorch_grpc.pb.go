// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bridgelink

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PyTorchServiceClient is the client API for PyTorchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PyTorchServiceClient interface {
	IsCudaAvailable(ctx context.Context, in *CudaAvailableRequest, opts ...grpc.CallOption) (*CudaAvailableResponse, error)
	GetCudaDeviceCount(ctx context.Context, in *CudaDeviceCountRequest, opts ...grpc.CallOption) (*CudaDeviceCountResponse, error)
	GetGPUMemoryInfo(ctx context.Context, in *CudaMemInfoRequest, opts ...grpc.CallOption) (*CudaMemInfoResponse, error)
}

type pyTorchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPyTorchServiceClient(cc grpc.ClientConnInterface) PyTorchServiceClient {
	return &pyTorchServiceClient{cc}
}

func (c *pyTorchServiceClient) IsCudaAvailable(ctx context.Context, in *CudaAvailableRequest, opts ...grpc.CallOption) (*CudaAvailableResponse, error) {
	out := new(CudaAvailableResponse)
	err := c.cc.Invoke(ctx, "/bridgelink.PyTorchService/IsCudaAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyTorchServiceClient) GetCudaDeviceCount(ctx context.Context, in *CudaDeviceCountRequest, opts ...grpc.CallOption) (*CudaDeviceCountResponse, error) {
	out := new(CudaDeviceCountResponse)
	err := c.cc.Invoke(ctx, "/bridgelink.PyTorchService/GetCudaDeviceCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyTorchServiceClient) GetGPUMemoryInfo(ctx context.Context, in *CudaMemInfoRequest, opts ...grpc.CallOption) (*CudaMemInfoResponse, error) {
	out := new(CudaMemInfoResponse)
	err := c.cc.Invoke(ctx, "/bridgelink.PyTorchService/GetGPUMemoryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PyTorchServiceServer is the server API for PyTorchService service.
// All implementations must embed UnimplementedPyTorchServiceServer
// for forward compatibility
type PyTorchServiceServer interface {
	IsCudaAvailable(context.Context, *CudaAvailableRequest) (*CudaAvailableResponse, error)
	GetCudaDeviceCount(context.Context, *CudaDeviceCountRequest) (*CudaDeviceCountResponse, error)
	GetGPUMemoryInfo(context.Context, *CudaMemInfoRequest) (*CudaMemInfoResponse, error)
	mustEmbedUnimplementedPyTorchServiceServer()
}

// UnimplementedPyTorchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPyTorchServiceServer struct {
}

func (UnimplementedPyTorchServiceServer) IsCudaAvailable(context.Context, *CudaAvailableRequest) (*CudaAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCudaAvailable not implemented")
}
func (UnimplementedPyTorchServiceServer) GetCudaDeviceCount(context.Context, *CudaDeviceCountRequest) (*CudaDeviceCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCudaDeviceCount not implemented")
}
func (UnimplementedPyTorchServiceServer) GetGPUMemoryInfo(context.Context, *CudaMemInfoRequest) (*CudaMemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGPUMemoryInfo not implemented")
}
func (UnimplementedPyTorchServiceServer) mustEmbedUnimplementedPyTorchServiceServer() {}

// UnsafePyTorchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PyTorchServiceServer will
// result in compilation errors.
type UnsafePyTorchServiceServer interface {
	mustEmbedUnimplementedPyTorchServiceServer()
}

func RegisterPyTorchServiceServer(s grpc.ServiceRegistrar, srv PyTorchServiceServer) {
	s.RegisterService(&PyTorchService_ServiceDesc, srv)
}

func _PyTorchService_IsCudaAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CudaAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyTorchServiceServer).IsCudaAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridgelink.PyTorchService/IsCudaAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyTorchServiceServer).IsCudaAvailable(ctx, req.(*CudaAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyTorchService_GetCudaDeviceCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CudaDeviceCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyTorchServiceServer).GetCudaDeviceCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridgelink.PyTorchService/GetCudaDeviceCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyTorchServiceServer).GetCudaDeviceCount(ctx, req.(*CudaDeviceCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyTorchService_GetGPUMemoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CudaMemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyTorchServiceServer).GetGPUMemoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridgelink.PyTorchService/GetGPUMemoryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyTorchServiceServer).GetGPUMemoryInfo(ctx, req.(*CudaMemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PyTorchService_ServiceDesc is the grpc.ServiceDesc for PyTorchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PyTorchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridgelink.PyTorchService",
	HandlerType: (*PyTorchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsCudaAvailable",
			Handler:    _PyTorchService_IsCudaAvailable_Handler,
		},
		{
			MethodName: "GetCudaDeviceCount",
			Handler:    _PyTorchService_GetCudaDeviceCount_Handler,
		},
		{
			MethodName: "GetGPUMemoryInfo",
			Handler:    _PyTorchService_GetGPUMemoryInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridgelink_pytorch.proto",
}
