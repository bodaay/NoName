// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bridgeserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BridgeServerServiceClient is the client API for BridgeServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BridgeServerServiceClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	StreamNumbers(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (BridgeServerService_StreamNumbersClient, error)
}

type bridgeServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBridgeServerServiceClient(cc grpc.ClientConnInterface) BridgeServerServiceClient {
	return &bridgeServerServiceClient{cc}
}

func (c *bridgeServerServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/bridgeserver.BridgeServerService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeServerServiceClient) StreamNumbers(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (BridgeServerService_StreamNumbersClient, error) {
	stream, err := c.cc.NewStream(ctx, &BridgeServerService_ServiceDesc.Streams[0], "/bridgeserver.BridgeServerService/StreamNumbers", opts...)
	if err != nil {
		return nil, err
	}
	x := &bridgeServerServiceStreamNumbersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BridgeServerService_StreamNumbersClient interface {
	Recv() (*StreamReply, error)
	grpc.ClientStream
}

type bridgeServerServiceStreamNumbersClient struct {
	grpc.ClientStream
}

func (x *bridgeServerServiceStreamNumbersClient) Recv() (*StreamReply, error) {
	m := new(StreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BridgeServerServiceServer is the server API for BridgeServerService service.
// All implementations must embed UnimplementedBridgeServerServiceServer
// for forward compatibility
type BridgeServerServiceServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	StreamNumbers(*StreamRequest, BridgeServerService_StreamNumbersServer) error
	mustEmbedUnimplementedBridgeServerServiceServer()
}

// UnimplementedBridgeServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBridgeServerServiceServer struct {
}

func (UnimplementedBridgeServerServiceServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedBridgeServerServiceServer) StreamNumbers(*StreamRequest, BridgeServerService_StreamNumbersServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamNumbers not implemented")
}
func (UnimplementedBridgeServerServiceServer) mustEmbedUnimplementedBridgeServerServiceServer() {}

// UnsafeBridgeServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BridgeServerServiceServer will
// result in compilation errors.
type UnsafeBridgeServerServiceServer interface {
	mustEmbedUnimplementedBridgeServerServiceServer()
}

func RegisterBridgeServerServiceServer(s grpc.ServiceRegistrar, srv BridgeServerServiceServer) {
	s.RegisterService(&BridgeServerService_ServiceDesc, srv)
}

func _BridgeServerService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServerServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridgeserver.BridgeServerService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServerServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeServerService_StreamNumbers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BridgeServerServiceServer).StreamNumbers(m, &bridgeServerServiceStreamNumbersServer{stream})
}

type BridgeServerService_StreamNumbersServer interface {
	Send(*StreamReply) error
	grpc.ServerStream
}

type bridgeServerServiceStreamNumbersServer struct {
	grpc.ServerStream
}

func (x *bridgeServerServiceStreamNumbersServer) Send(m *StreamReply) error {
	return x.ServerStream.SendMsg(m)
}

// BridgeServerService_ServiceDesc is the grpc.ServiceDesc for BridgeServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BridgeServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridgeserver.BridgeServerService",
	HandlerType: (*BridgeServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _BridgeServerService_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNumbers",
			Handler:       _BridgeServerService_StreamNumbers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bridge.proto",
}
