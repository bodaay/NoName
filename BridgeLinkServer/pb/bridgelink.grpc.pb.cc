// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bridgelink.proto

#include "bridgelink.pb.h"
#include "bridgelink.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace bridgelink {

static const char* BridgeLink_method_names[] = {
  "/bridgelink.BridgeLink/GetServiceLinkVersionNumber",
  "/bridgelink.BridgeLink/GetUptime",
  "/bridgelink.BridgeLink/StreamRandomString",
};

std::unique_ptr< BridgeLink::Stub> BridgeLink::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BridgeLink::Stub> stub(new BridgeLink::Stub(channel, options));
  return stub;
}

BridgeLink::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetServiceLinkVersionNumber_(BridgeLink_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUptime_(BridgeLink_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamRandomString_(BridgeLink_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status BridgeLink::Stub::GetServiceLinkVersionNumber(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest& request, ::bridgelink::ServiceLinkVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bridgelink::ServiceLinkVersionRequest, ::bridgelink::ServiceLinkVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServiceLinkVersionNumber_, context, request, response);
}

void BridgeLink::Stub::async::GetServiceLinkVersionNumber(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest* request, ::bridgelink::ServiceLinkVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bridgelink::ServiceLinkVersionRequest, ::bridgelink::ServiceLinkVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceLinkVersionNumber_, context, request, response, std::move(f));
}

void BridgeLink::Stub::async::GetServiceLinkVersionNumber(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest* request, ::bridgelink::ServiceLinkVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceLinkVersionNumber_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bridgelink::ServiceLinkVersionResponse>* BridgeLink::Stub::PrepareAsyncGetServiceLinkVersionNumberRaw(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bridgelink::ServiceLinkVersionResponse, ::bridgelink::ServiceLinkVersionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServiceLinkVersionNumber_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bridgelink::ServiceLinkVersionResponse>* BridgeLink::Stub::AsyncGetServiceLinkVersionNumberRaw(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServiceLinkVersionNumberRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BridgeLink::Stub::GetUptime(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest& request, ::bridgelink::UptimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bridgelink::UptimeRequest, ::bridgelink::UptimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUptime_, context, request, response);
}

void BridgeLink::Stub::async::GetUptime(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest* request, ::bridgelink::UptimeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bridgelink::UptimeRequest, ::bridgelink::UptimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUptime_, context, request, response, std::move(f));
}

void BridgeLink::Stub::async::GetUptime(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest* request, ::bridgelink::UptimeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUptime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bridgelink::UptimeResponse>* BridgeLink::Stub::PrepareAsyncGetUptimeRaw(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bridgelink::UptimeResponse, ::bridgelink::UptimeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUptime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bridgelink::UptimeResponse>* BridgeLink::Stub::AsyncGetUptimeRaw(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUptimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::bridgelink::StreamResponse>* BridgeLink::Stub::StreamRandomStringRaw(::grpc::ClientContext* context, const ::bridgelink::StreamRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::bridgelink::StreamResponse>::Create(channel_.get(), rpcmethod_StreamRandomString_, context, request);
}

void BridgeLink::Stub::async::StreamRandomString(::grpc::ClientContext* context, const ::bridgelink::StreamRequest* request, ::grpc::ClientReadReactor< ::bridgelink::StreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::bridgelink::StreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamRandomString_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::bridgelink::StreamResponse>* BridgeLink::Stub::AsyncStreamRandomStringRaw(::grpc::ClientContext* context, const ::bridgelink::StreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::bridgelink::StreamResponse>::Create(channel_.get(), cq, rpcmethod_StreamRandomString_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::bridgelink::StreamResponse>* BridgeLink::Stub::PrepareAsyncStreamRandomStringRaw(::grpc::ClientContext* context, const ::bridgelink::StreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::bridgelink::StreamResponse>::Create(channel_.get(), cq, rpcmethod_StreamRandomString_, context, request, false, nullptr);
}

BridgeLink::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BridgeLink_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BridgeLink::Service, ::bridgelink::ServiceLinkVersionRequest, ::bridgelink::ServiceLinkVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BridgeLink::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bridgelink::ServiceLinkVersionRequest* req,
             ::bridgelink::ServiceLinkVersionResponse* resp) {
               return service->GetServiceLinkVersionNumber(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BridgeLink_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BridgeLink::Service, ::bridgelink::UptimeRequest, ::bridgelink::UptimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BridgeLink::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bridgelink::UptimeRequest* req,
             ::bridgelink::UptimeResponse* resp) {
               return service->GetUptime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BridgeLink_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< BridgeLink::Service, ::bridgelink::StreamRequest, ::bridgelink::StreamResponse>(
          [](BridgeLink::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bridgelink::StreamRequest* req,
             ::grpc::ServerWriter<::bridgelink::StreamResponse>* writer) {
               return service->StreamRandomString(ctx, req, writer);
             }, this)));
}

BridgeLink::Service::~Service() {
}

::grpc::Status BridgeLink::Service::GetServiceLinkVersionNumber(::grpc::ServerContext* context, const ::bridgelink::ServiceLinkVersionRequest* request, ::bridgelink::ServiceLinkVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BridgeLink::Service::GetUptime(::grpc::ServerContext* context, const ::bridgelink::UptimeRequest* request, ::bridgelink::UptimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BridgeLink::Service::StreamRandomString(::grpc::ServerContext* context, const ::bridgelink::StreamRequest* request, ::grpc::ServerWriter< ::bridgelink::StreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bridgelink

