// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: brdigelink_pytorch.proto

#include "brdigelink_pytorch.pb.h"
#include "brdigelink_pytorch.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace bridgelink {

static const char* PyTorchService_method_names[] = {
  "/bridgelink.PyTorchService/IsCudaAvailable",
  "/bridgelink.PyTorchService/GetCudaDeviceCount",
};

std::unique_ptr< PyTorchService::Stub> PyTorchService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PyTorchService::Stub> stub(new PyTorchService::Stub(channel, options));
  return stub;
}

PyTorchService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_IsCudaAvailable_(PyTorchService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCudaDeviceCount_(PyTorchService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PyTorchService::Stub::IsCudaAvailable(::grpc::ClientContext* context, const ::bridgelink::CudaAvailableRequest& request, ::bridgelink::CudaAvailableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bridgelink::CudaAvailableRequest, ::bridgelink::CudaAvailableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsCudaAvailable_, context, request, response);
}

void PyTorchService::Stub::async::IsCudaAvailable(::grpc::ClientContext* context, const ::bridgelink::CudaAvailableRequest* request, ::bridgelink::CudaAvailableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bridgelink::CudaAvailableRequest, ::bridgelink::CudaAvailableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsCudaAvailable_, context, request, response, std::move(f));
}

void PyTorchService::Stub::async::IsCudaAvailable(::grpc::ClientContext* context, const ::bridgelink::CudaAvailableRequest* request, ::bridgelink::CudaAvailableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsCudaAvailable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bridgelink::CudaAvailableResponse>* PyTorchService::Stub::PrepareAsyncIsCudaAvailableRaw(::grpc::ClientContext* context, const ::bridgelink::CudaAvailableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bridgelink::CudaAvailableResponse, ::bridgelink::CudaAvailableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsCudaAvailable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bridgelink::CudaAvailableResponse>* PyTorchService::Stub::AsyncIsCudaAvailableRaw(::grpc::ClientContext* context, const ::bridgelink::CudaAvailableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsCudaAvailableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PyTorchService::Stub::GetCudaDeviceCount(::grpc::ClientContext* context, const ::bridgelink::CudaDeviceCountRequest& request, ::bridgelink::CudaDeviceCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bridgelink::CudaDeviceCountRequest, ::bridgelink::CudaDeviceCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCudaDeviceCount_, context, request, response);
}

void PyTorchService::Stub::async::GetCudaDeviceCount(::grpc::ClientContext* context, const ::bridgelink::CudaDeviceCountRequest* request, ::bridgelink::CudaDeviceCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bridgelink::CudaDeviceCountRequest, ::bridgelink::CudaDeviceCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCudaDeviceCount_, context, request, response, std::move(f));
}

void PyTorchService::Stub::async::GetCudaDeviceCount(::grpc::ClientContext* context, const ::bridgelink::CudaDeviceCountRequest* request, ::bridgelink::CudaDeviceCountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCudaDeviceCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bridgelink::CudaDeviceCountResponse>* PyTorchService::Stub::PrepareAsyncGetCudaDeviceCountRaw(::grpc::ClientContext* context, const ::bridgelink::CudaDeviceCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bridgelink::CudaDeviceCountResponse, ::bridgelink::CudaDeviceCountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCudaDeviceCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bridgelink::CudaDeviceCountResponse>* PyTorchService::Stub::AsyncGetCudaDeviceCountRaw(::grpc::ClientContext* context, const ::bridgelink::CudaDeviceCountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCudaDeviceCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

PyTorchService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PyTorchService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PyTorchService::Service, ::bridgelink::CudaAvailableRequest, ::bridgelink::CudaAvailableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PyTorchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bridgelink::CudaAvailableRequest* req,
             ::bridgelink::CudaAvailableResponse* resp) {
               return service->IsCudaAvailable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PyTorchService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PyTorchService::Service, ::bridgelink::CudaDeviceCountRequest, ::bridgelink::CudaDeviceCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PyTorchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bridgelink::CudaDeviceCountRequest* req,
             ::bridgelink::CudaDeviceCountResponse* resp) {
               return service->GetCudaDeviceCount(ctx, req, resp);
             }, this)));
}

PyTorchService::Service::~Service() {
}

::grpc::Status PyTorchService::Service::IsCudaAvailable(::grpc::ServerContext* context, const ::bridgelink::CudaAvailableRequest* request, ::bridgelink::CudaAvailableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PyTorchService::Service::GetCudaDeviceCount(::grpc::ServerContext* context, const ::bridgelink::CudaDeviceCountRequest* request, ::bridgelink::CudaDeviceCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bridgelink

