// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bridgelink.proto
#ifndef GRPC_bridgelink_2eproto__INCLUDED
#define GRPC_bridgelink_2eproto__INCLUDED

#include "bridgelink.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace bridgelink {

class BridgeLink final {
 public:
  static constexpr char const* service_full_name() {
    return "bridgelink.BridgeLink";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetServiceLinkVersionNumber(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest& request, ::bridgelink::ServiceLinkVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bridgelink::ServiceLinkVersionResponse>> AsyncGetServiceLinkVersionNumber(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bridgelink::ServiceLinkVersionResponse>>(AsyncGetServiceLinkVersionNumberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bridgelink::ServiceLinkVersionResponse>> PrepareAsyncGetServiceLinkVersionNumber(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bridgelink::ServiceLinkVersionResponse>>(PrepareAsyncGetServiceLinkVersionNumberRaw(context, request, cq));
    }
    virtual ::grpc::Status GetUptime(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest& request, ::bridgelink::UptimeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bridgelink::UptimeResponse>> AsyncGetUptime(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bridgelink::UptimeResponse>>(AsyncGetUptimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bridgelink::UptimeResponse>> PrepareAsyncGetUptime(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bridgelink::UptimeResponse>>(PrepareAsyncGetUptimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::bridgelink::StreamResponse>> StreamRandomString(::grpc::ClientContext* context, const ::bridgelink::StreamRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::bridgelink::StreamResponse>>(StreamRandomStringRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bridgelink::StreamResponse>> AsyncStreamRandomString(::grpc::ClientContext* context, const ::bridgelink::StreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bridgelink::StreamResponse>>(AsyncStreamRandomStringRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bridgelink::StreamResponse>> PrepareAsyncStreamRandomString(::grpc::ClientContext* context, const ::bridgelink::StreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bridgelink::StreamResponse>>(PrepareAsyncStreamRandomStringRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetServiceLinkVersionNumber(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest* request, ::bridgelink::ServiceLinkVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServiceLinkVersionNumber(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest* request, ::bridgelink::ServiceLinkVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetUptime(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest* request, ::bridgelink::UptimeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUptime(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest* request, ::bridgelink::UptimeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamRandomString(::grpc::ClientContext* context, const ::bridgelink::StreamRequest* request, ::grpc::ClientReadReactor< ::bridgelink::StreamResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bridgelink::ServiceLinkVersionResponse>* AsyncGetServiceLinkVersionNumberRaw(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bridgelink::ServiceLinkVersionResponse>* PrepareAsyncGetServiceLinkVersionNumberRaw(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bridgelink::UptimeResponse>* AsyncGetUptimeRaw(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bridgelink::UptimeResponse>* PrepareAsyncGetUptimeRaw(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::bridgelink::StreamResponse>* StreamRandomStringRaw(::grpc::ClientContext* context, const ::bridgelink::StreamRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::bridgelink::StreamResponse>* AsyncStreamRandomStringRaw(::grpc::ClientContext* context, const ::bridgelink::StreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::bridgelink::StreamResponse>* PrepareAsyncStreamRandomStringRaw(::grpc::ClientContext* context, const ::bridgelink::StreamRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetServiceLinkVersionNumber(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest& request, ::bridgelink::ServiceLinkVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bridgelink::ServiceLinkVersionResponse>> AsyncGetServiceLinkVersionNumber(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bridgelink::ServiceLinkVersionResponse>>(AsyncGetServiceLinkVersionNumberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bridgelink::ServiceLinkVersionResponse>> PrepareAsyncGetServiceLinkVersionNumber(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bridgelink::ServiceLinkVersionResponse>>(PrepareAsyncGetServiceLinkVersionNumberRaw(context, request, cq));
    }
    ::grpc::Status GetUptime(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest& request, ::bridgelink::UptimeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bridgelink::UptimeResponse>> AsyncGetUptime(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bridgelink::UptimeResponse>>(AsyncGetUptimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bridgelink::UptimeResponse>> PrepareAsyncGetUptime(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bridgelink::UptimeResponse>>(PrepareAsyncGetUptimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::bridgelink::StreamResponse>> StreamRandomString(::grpc::ClientContext* context, const ::bridgelink::StreamRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::bridgelink::StreamResponse>>(StreamRandomStringRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::bridgelink::StreamResponse>> AsyncStreamRandomString(::grpc::ClientContext* context, const ::bridgelink::StreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::bridgelink::StreamResponse>>(AsyncStreamRandomStringRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::bridgelink::StreamResponse>> PrepareAsyncStreamRandomString(::grpc::ClientContext* context, const ::bridgelink::StreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::bridgelink::StreamResponse>>(PrepareAsyncStreamRandomStringRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetServiceLinkVersionNumber(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest* request, ::bridgelink::ServiceLinkVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetServiceLinkVersionNumber(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest* request, ::bridgelink::ServiceLinkVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetUptime(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest* request, ::bridgelink::UptimeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUptime(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest* request, ::bridgelink::UptimeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamRandomString(::grpc::ClientContext* context, const ::bridgelink::StreamRequest* request, ::grpc::ClientReadReactor< ::bridgelink::StreamResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bridgelink::ServiceLinkVersionResponse>* AsyncGetServiceLinkVersionNumberRaw(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bridgelink::ServiceLinkVersionResponse>* PrepareAsyncGetServiceLinkVersionNumberRaw(::grpc::ClientContext* context, const ::bridgelink::ServiceLinkVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bridgelink::UptimeResponse>* AsyncGetUptimeRaw(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bridgelink::UptimeResponse>* PrepareAsyncGetUptimeRaw(::grpc::ClientContext* context, const ::bridgelink::UptimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::bridgelink::StreamResponse>* StreamRandomStringRaw(::grpc::ClientContext* context, const ::bridgelink::StreamRequest& request) override;
    ::grpc::ClientAsyncReader< ::bridgelink::StreamResponse>* AsyncStreamRandomStringRaw(::grpc::ClientContext* context, const ::bridgelink::StreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::bridgelink::StreamResponse>* PrepareAsyncStreamRandomStringRaw(::grpc::ClientContext* context, const ::bridgelink::StreamRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetServiceLinkVersionNumber_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUptime_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamRandomString_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetServiceLinkVersionNumber(::grpc::ServerContext* context, const ::bridgelink::ServiceLinkVersionRequest* request, ::bridgelink::ServiceLinkVersionResponse* response);
    virtual ::grpc::Status GetUptime(::grpc::ServerContext* context, const ::bridgelink::UptimeRequest* request, ::bridgelink::UptimeResponse* response);
    virtual ::grpc::Status StreamRandomString(::grpc::ServerContext* context, const ::bridgelink::StreamRequest* request, ::grpc::ServerWriter< ::bridgelink::StreamResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceLinkVersionNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServiceLinkVersionNumber() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetServiceLinkVersionNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceLinkVersionNumber(::grpc::ServerContext* /*context*/, const ::bridgelink::ServiceLinkVersionRequest* /*request*/, ::bridgelink::ServiceLinkVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceLinkVersionNumber(::grpc::ServerContext* context, ::bridgelink::ServiceLinkVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::bridgelink::ServiceLinkVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUptime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUptime() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetUptime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUptime(::grpc::ServerContext* /*context*/, const ::bridgelink::UptimeRequest* /*request*/, ::bridgelink::UptimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUptime(::grpc::ServerContext* context, ::bridgelink::UptimeRequest* request, ::grpc::ServerAsyncResponseWriter< ::bridgelink::UptimeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamRandomString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamRandomString() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StreamRandomString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRandomString(::grpc::ServerContext* /*context*/, const ::bridgelink::StreamRequest* /*request*/, ::grpc::ServerWriter< ::bridgelink::StreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamRandomString(::grpc::ServerContext* context, ::bridgelink::StreamRequest* request, ::grpc::ServerAsyncWriter< ::bridgelink::StreamResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetServiceLinkVersionNumber<WithAsyncMethod_GetUptime<WithAsyncMethod_StreamRandomString<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetServiceLinkVersionNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetServiceLinkVersionNumber() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bridgelink::ServiceLinkVersionRequest, ::bridgelink::ServiceLinkVersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bridgelink::ServiceLinkVersionRequest* request, ::bridgelink::ServiceLinkVersionResponse* response) { return this->GetServiceLinkVersionNumber(context, request, response); }));}
    void SetMessageAllocatorFor_GetServiceLinkVersionNumber(
        ::grpc::MessageAllocator< ::bridgelink::ServiceLinkVersionRequest, ::bridgelink::ServiceLinkVersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bridgelink::ServiceLinkVersionRequest, ::bridgelink::ServiceLinkVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetServiceLinkVersionNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceLinkVersionNumber(::grpc::ServerContext* /*context*/, const ::bridgelink::ServiceLinkVersionRequest* /*request*/, ::bridgelink::ServiceLinkVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServiceLinkVersionNumber(
      ::grpc::CallbackServerContext* /*context*/, const ::bridgelink::ServiceLinkVersionRequest* /*request*/, ::bridgelink::ServiceLinkVersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetUptime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUptime() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bridgelink::UptimeRequest, ::bridgelink::UptimeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bridgelink::UptimeRequest* request, ::bridgelink::UptimeResponse* response) { return this->GetUptime(context, request, response); }));}
    void SetMessageAllocatorFor_GetUptime(
        ::grpc::MessageAllocator< ::bridgelink::UptimeRequest, ::bridgelink::UptimeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bridgelink::UptimeRequest, ::bridgelink::UptimeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUptime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUptime(::grpc::ServerContext* /*context*/, const ::bridgelink::UptimeRequest* /*request*/, ::bridgelink::UptimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUptime(
      ::grpc::CallbackServerContext* /*context*/, const ::bridgelink::UptimeRequest* /*request*/, ::bridgelink::UptimeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamRandomString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamRandomString() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::bridgelink::StreamRequest, ::bridgelink::StreamResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bridgelink::StreamRequest* request) { return this->StreamRandomString(context, request); }));
    }
    ~WithCallbackMethod_StreamRandomString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRandomString(::grpc::ServerContext* /*context*/, const ::bridgelink::StreamRequest* /*request*/, ::grpc::ServerWriter< ::bridgelink::StreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::bridgelink::StreamResponse>* StreamRandomString(
      ::grpc::CallbackServerContext* /*context*/, const ::bridgelink::StreamRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetServiceLinkVersionNumber<WithCallbackMethod_GetUptime<WithCallbackMethod_StreamRandomString<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetServiceLinkVersionNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServiceLinkVersionNumber() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetServiceLinkVersionNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceLinkVersionNumber(::grpc::ServerContext* /*context*/, const ::bridgelink::ServiceLinkVersionRequest* /*request*/, ::bridgelink::ServiceLinkVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUptime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUptime() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetUptime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUptime(::grpc::ServerContext* /*context*/, const ::bridgelink::UptimeRequest* /*request*/, ::bridgelink::UptimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamRandomString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamRandomString() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StreamRandomString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRandomString(::grpc::ServerContext* /*context*/, const ::bridgelink::StreamRequest* /*request*/, ::grpc::ServerWriter< ::bridgelink::StreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServiceLinkVersionNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServiceLinkVersionNumber() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetServiceLinkVersionNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceLinkVersionNumber(::grpc::ServerContext* /*context*/, const ::bridgelink::ServiceLinkVersionRequest* /*request*/, ::bridgelink::ServiceLinkVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceLinkVersionNumber(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUptime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUptime() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetUptime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUptime(::grpc::ServerContext* /*context*/, const ::bridgelink::UptimeRequest* /*request*/, ::bridgelink::UptimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUptime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamRandomString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamRandomString() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StreamRandomString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRandomString(::grpc::ServerContext* /*context*/, const ::bridgelink::StreamRequest* /*request*/, ::grpc::ServerWriter< ::bridgelink::StreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamRandomString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetServiceLinkVersionNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetServiceLinkVersionNumber() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServiceLinkVersionNumber(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetServiceLinkVersionNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceLinkVersionNumber(::grpc::ServerContext* /*context*/, const ::bridgelink::ServiceLinkVersionRequest* /*request*/, ::bridgelink::ServiceLinkVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServiceLinkVersionNumber(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUptime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUptime() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUptime(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUptime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUptime(::grpc::ServerContext* /*context*/, const ::bridgelink::UptimeRequest* /*request*/, ::bridgelink::UptimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUptime(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamRandomString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamRandomString() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamRandomString(context, request); }));
    }
    ~WithRawCallbackMethod_StreamRandomString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRandomString(::grpc::ServerContext* /*context*/, const ::bridgelink::StreamRequest* /*request*/, ::grpc::ServerWriter< ::bridgelink::StreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamRandomString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServiceLinkVersionNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServiceLinkVersionNumber() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bridgelink::ServiceLinkVersionRequest, ::bridgelink::ServiceLinkVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bridgelink::ServiceLinkVersionRequest, ::bridgelink::ServiceLinkVersionResponse>* streamer) {
                       return this->StreamedGetServiceLinkVersionNumber(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServiceLinkVersionNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServiceLinkVersionNumber(::grpc::ServerContext* /*context*/, const ::bridgelink::ServiceLinkVersionRequest* /*request*/, ::bridgelink::ServiceLinkVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServiceLinkVersionNumber(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bridgelink::ServiceLinkVersionRequest,::bridgelink::ServiceLinkVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUptime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUptime() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bridgelink::UptimeRequest, ::bridgelink::UptimeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bridgelink::UptimeRequest, ::bridgelink::UptimeResponse>* streamer) {
                       return this->StreamedGetUptime(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUptime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUptime(::grpc::ServerContext* /*context*/, const ::bridgelink::UptimeRequest* /*request*/, ::bridgelink::UptimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUptime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bridgelink::UptimeRequest,::bridgelink::UptimeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetServiceLinkVersionNumber<WithStreamedUnaryMethod_GetUptime<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamRandomString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamRandomString() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::bridgelink::StreamRequest, ::bridgelink::StreamResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::bridgelink::StreamRequest, ::bridgelink::StreamResponse>* streamer) {
                       return this->StreamedStreamRandomString(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamRandomString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamRandomString(::grpc::ServerContext* /*context*/, const ::bridgelink::StreamRequest* /*request*/, ::grpc::ServerWriter< ::bridgelink::StreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamRandomString(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::bridgelink::StreamRequest,::bridgelink::StreamResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamRandomString<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetServiceLinkVersionNumber<WithStreamedUnaryMethod_GetUptime<WithSplitStreamingMethod_StreamRandomString<Service > > > StreamedService;
};

}  // namespace bridgelink


#endif  // GRPC_bridgelink_2eproto__INCLUDED
